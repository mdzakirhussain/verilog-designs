/* Generated by Yosys 0.53+70 (git sha1 3ef4c91c3, g++ 9.4.0-1ubuntu1~20.04.2 -fPIC -O3) */

module sg13g2_a21o_1(X, A1, A2, B1);
  wire _0_;
  input A1;
  wire A1;
  input A2;
  wire A2;
  input B1;
  wire B1;
  output X;
  wire X;
  assign _0_ = A1 & A2;
  assign X = _0_ | B1;
endmodule

module sg13g2_a21o_2(X, A1, A2, B1);
  wire _0_;
  input A1;
  wire A1;
  input A2;
  wire A2;
  input B1;
  wire B1;
  output X;
  wire X;
  assign _0_ = A1 & A2;
  assign X = _0_ | B1;
endmodule

module sg13g2_a21oi_1(Y, A1, A2, B1);
  wire _0_;
  wire _1_;
  input A1;
  wire A1;
  input A2;
  wire A2;
  input B1;
  wire B1;
  output Y;
  wire Y;
  assign _0_ = A1 & A2;
  assign _1_ = _0_ | B1;
  assign Y = ~_1_;
endmodule

module sg13g2_a21oi_2(Y, A1, A2, B1);
  wire _0_;
  wire _1_;
  input A1;
  wire A1;
  input A2;
  wire A2;
  input B1;
  wire B1;
  output Y;
  wire Y;
  assign _0_ = A1 & A2;
  assign _1_ = _0_ | B1;
  assign Y = ~_1_;
endmodule

module sg13g2_a221oi_1(Y, A1, A2, B1, B2, C1);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  input A1;
  wire A1;
  input A2;
  wire A2;
  input B1;
  wire B1;
  input B2;
  wire B2;
  input C1;
  wire C1;
  output Y;
  wire Y;
  assign _0_ = A1 & A2;
  assign _1_ = B1 & B2;
  assign _2_ = _0_ | _1_;
  assign _3_ = _2_ | C1;
  assign Y = ~_3_;
endmodule

module sg13g2_a22oi_1(Y, A1, A2, B1, B2);
  wire _0_;
  wire _1_;
  wire _2_;
  input A1;
  wire A1;
  input A2;
  wire A2;
  input B1;
  wire B1;
  input B2;
  wire B2;
  output Y;
  wire Y;
  assign _0_ = A1 & A2;
  assign _1_ = B1 & B2;
  assign _2_ = _0_ | _1_;
  assign Y = ~_2_;
endmodule

module sg13g2_and2_1(A, B, X);
  input A;
  wire A;
  input B;
  wire B;
  output X;
  wire X;
  assign X = A & B;
endmodule

module sg13g2_and2_2(A, B, X);
  input A;
  wire A;
  input B;
  wire B;
  output X;
  wire X;
  assign X = A & B;
endmodule

module sg13g2_and3_1(A, B, C, X);
  wire _0_;
  input A;
  wire A;
  input B;
  wire B;
  input C;
  wire C;
  output X;
  wire X;
  assign _0_ = A & B;
  assign X = _0_ & C;
endmodule

module sg13g2_and3_2(A, B, C, X);
  wire _0_;
  input A;
  wire A;
  input B;
  wire B;
  input C;
  wire C;
  output X;
  wire X;
  assign _0_ = A & B;
  assign X = _0_ & C;
endmodule

module sg13g2_and4_1(A, B, C, D, X);
  wire _0_;
  wire _1_;
  input A;
  wire A;
  input B;
  wire B;
  input C;
  wire C;
  input D;
  wire D;
  output X;
  wire X;
  assign _0_ = A & B;
  assign _1_ = _0_ & C;
  assign X = _1_ & D;
endmodule

module sg13g2_and4_2(A, B, C, D, X);
  wire _0_;
  wire _1_;
  input A;
  wire A;
  input B;
  wire B;
  input C;
  wire C;
  input D;
  wire D;
  output X;
  wire X;
  assign _0_ = A & B;
  assign _1_ = _0_ & C;
  assign X = _1_ & D;
endmodule

module sg13g2_antennanp(A);
  input A;
  wire A;
endmodule

module sg13g2_buf_1(A, X);
  input A;
  wire A;
  output X;
  wire X;
  assign X = A;
endmodule

module sg13g2_buf_16(A, X);
  input A;
  wire A;
  output X;
  wire X;
  assign X = A;
endmodule

module sg13g2_buf_2(A, X);
  input A;
  wire A;
  output X;
  wire X;
  assign X = A;
endmodule

module sg13g2_buf_4(A, X);
  input A;
  wire A;
  output X;
  wire X;
  assign X = A;
endmodule

module sg13g2_buf_8(A, X);
  input A;
  wire A;
  output X;
  wire X;
  assign X = A;
endmodule

module sg13g2_decap_4();
endmodule

module sg13g2_decap_8();
endmodule

module sg13g2_dfrbp_1(CLK, D, Q, Q_N, RESET_B);
  input CLK;
  wire CLK;
  input D;
  wire D;
  reg IQ;
  wire IQN;
  output Q;
  wire Q;
  output Q_N;
  wire Q_N;
  input RESET_B;
  wire RESET_B;
  assign IQN = ~IQ;
  always @(posedge CLK, negedge RESET_B)
    if (!RESET_B) IQ <= 1'h0;
    else IQ <= D;
  assign Q_N = IQN;
  assign Q = IQ;
endmodule

module sg13g2_dfrbp_2(CLK, D, Q, Q_N, RESET_B);
  input CLK;
  wire CLK;
  input D;
  wire D;
  reg IQ;
  wire IQN;
  output Q;
  wire Q;
  output Q_N;
  wire Q_N;
  input RESET_B;
  wire RESET_B;
  assign IQN = ~IQ;
  always @(posedge CLK, negedge RESET_B)
    if (!RESET_B) IQ <= 1'h0;
    else IQ <= D;
  assign Q_N = IQN;
  assign Q = IQ;
endmodule

module sg13g2_dlhq_1(D, Q, GATE);
  input D;
  wire D;
  input GATE;
  wire GATE;
  reg IQ;
  output Q;
  wire Q;
  always @*
    if (GATE) IQ = D;
  assign Q = IQ;
endmodule

module sg13g2_dlhr_1(D, Q, Q_N, RESET_B, GATE);
  wire _0_;
  wire _1_;
  wire _2_;
  input D;
  wire D;
  input GATE;
  wire GATE;
  reg IQ;
  wire IQN;
  output Q;
  wire Q;
  output Q_N;
  wire Q_N;
  input RESET_B;
  wire RESET_B;
  assign IQN = ~IQ;
  assign _0_ = ~RESET_B;
  assign _1_ = D & RESET_B;
  assign _2_ = GATE | _0_;
  always @*
    if (_2_) IQ = _1_;
  assign Q_N = IQN;
  assign Q = IQ;
endmodule

module sg13g2_dlhrq_1(D, Q, RESET_B, GATE);
  wire _0_;
  wire _1_;
  wire _2_;
  input D;
  wire D;
  input GATE;
  wire GATE;
  reg IQ;
  output Q;
  wire Q;
  input RESET_B;
  wire RESET_B;
  assign _0_ = ~RESET_B;
  assign _1_ = D & RESET_B;
  assign _2_ = GATE | _0_;
  always @*
    if (_2_) IQ = _1_;
  assign Q = IQ;
endmodule

module sg13g2_dllr_1(D, Q, Q_N, RESET_B, GATE_N);
  wire _0_;
  wire _1_;
  input D;
  wire D;
  input GATE_N;
  wire GATE_N;
  reg IQ;
  wire IQN;
  output Q;
  wire Q;
  output Q_N;
  wire Q_N;
  input RESET_B;
  wire RESET_B;
  assign IQN = ~IQ;
  assign _0_ = D & RESET_B;
  assign _1_ = GATE_N & RESET_B;
  always @*
    if (!_1_) IQ = _0_;
  assign Q_N = IQN;
  assign Q = IQ;
endmodule

module sg13g2_dllrq_1(D, Q, RESET_B, GATE_N);
  wire _0_;
  wire _1_;
  input D;
  wire D;
  input GATE_N;
  wire GATE_N;
  reg IQ;
  output Q;
  wire Q;
  input RESET_B;
  wire RESET_B;
  assign _0_ = D & RESET_B;
  assign _1_ = GATE_N & RESET_B;
  always @*
    if (!_1_) IQ = _0_;
  assign Q = IQ;
endmodule

module sg13g2_dlygate4sd1_1(A, X);
  input A;
  wire A;
  output X;
  wire X;
  assign X = A;
endmodule

module sg13g2_dlygate4sd2_1(A, X);
  input A;
  wire A;
  output X;
  wire X;
  assign X = A;
endmodule

module sg13g2_dlygate4sd3_1(A, X);
  input A;
  wire A;
  output X;
  wire X;
  assign X = A;
endmodule

module sg13g2_ebufn_2(A, Z, TE_B);
  wire _0_;
  input A;
  wire A;
  input TE_B;
  wire TE_B;
  output Z;
  wire Z;
  assign Z = _0_ ? A : 1'bz;
  assign _0_ = ~TE_B;
endmodule

module sg13g2_ebufn_4(A, Z, TE_B);
  wire _0_;
  input A;
  wire A;
  input TE_B;
  wire TE_B;
  output Z;
  wire Z;
  assign Z = _0_ ? A : 1'bz;
  assign _0_ = ~TE_B;
endmodule

module sg13g2_ebufn_8(A, Z, TE_B);
  wire _0_;
  input A;
  wire A;
  input TE_B;
  wire TE_B;
  output Z;
  wire Z;
  assign Z = _0_ ? A : 1'bz;
  assign _0_ = ~TE_B;
endmodule

module sg13g2_einvn_2(A, Z, TE_B);
  wire _0_;
  wire _1_;
  input A;
  wire A;
  input TE_B;
  wire TE_B;
  output Z;
  wire Z;
  assign Z = _1_ ? _0_ : 1'bz;
  assign _1_ = ~TE_B;
  assign _0_ = ~A;
endmodule

module sg13g2_einvn_4(A, Z, TE_B);
  wire _0_;
  wire _1_;
  input A;
  wire A;
  input TE_B;
  wire TE_B;
  output Z;
  wire Z;
  assign Z = _1_ ? _0_ : 1'bz;
  assign _1_ = ~TE_B;
  assign _0_ = ~A;
endmodule

module sg13g2_einvn_8(A, Z, TE_B);
  wire _0_;
  wire _1_;
  input A;
  wire A;
  input TE_B;
  wire TE_B;
  output Z;
  wire Z;
  assign Z = _1_ ? _0_ : 1'bz;
  assign _1_ = ~TE_B;
  assign _0_ = ~A;
endmodule

module sg13g2_fill_1();
endmodule

module sg13g2_fill_2();
endmodule

module sg13g2_fill_4();
endmodule

module sg13g2_fill_8();
endmodule

module sg13g2_inv_1(A, Y);
  input A;
  wire A;
  output Y;
  wire Y;
  assign Y = ~A;
endmodule

module sg13g2_inv_16(A, Y);
  input A;
  wire A;
  output Y;
  wire Y;
  assign Y = ~A;
endmodule

module sg13g2_inv_2(A, Y);
  input A;
  wire A;
  output Y;
  wire Y;
  assign Y = ~A;
endmodule

module sg13g2_inv_4(A, Y);
  input A;
  wire A;
  output Y;
  wire Y;
  assign Y = ~A;
endmodule

module sg13g2_inv_8(A, Y);
  input A;
  wire A;
  output Y;
  wire Y;
  assign Y = ~A;
endmodule

module sg13g2_lgcp_1(CLK, GATE, GCLK);
  input CLK;
  wire CLK;
  input GATE;
  wire GATE;
  output GCLK;
  wire GCLK;
  wire int_GATE;
  assign GCLK = 1'h1;
  assign int_GATE = 1'h1;
endmodule

module sg13g2_mux2_1(S, X, A1, A0);
  wire _0_;
  wire _1_;
  wire _2_;
  input A0;
  wire A0;
  input A1;
  wire A1;
  input S;
  wire S;
  output X;
  wire X;
  assign _1_ = _0_ & A0;
  assign _2_ = S & A1;
  assign X = _1_ | _2_;
  assign _0_ = ~S;
endmodule

module sg13g2_mux2_2(S, X, A1, A0);
  wire _0_;
  wire _1_;
  wire _2_;
  input A0;
  wire A0;
  input A1;
  wire A1;
  input S;
  wire S;
  output X;
  wire X;
  assign _1_ = _0_ & A0;
  assign _2_ = S & A1;
  assign X = _1_ | _2_;
  assign _0_ = ~S;
endmodule

module sg13g2_mux4_1(X, A1, A2, A0, A3, S0, S1);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  input A0;
  wire A0;
  input A1;
  wire A1;
  input A2;
  wire A2;
  input A3;
  wire A3;
  input S0;
  wire S0;
  input S1;
  wire S1;
  output X;
  wire X;
  assign _04_ = _00_ & _01_;
  assign _05_ = A0 & _04_;
  assign _06_ = S0 & _02_;
  assign _07_ = A1 & _06_;
  assign _08_ = _03_ & S1;
  assign _09_ = A2 & _08_;
  assign _10_ = S0 & S1;
  assign _11_ = A3 & _10_;
  assign _12_ = _05_ | _07_;
  assign _13_ = _12_ | _09_;
  assign X = _13_ | _11_;
  assign _00_ = ~S0;
  assign _01_ = ~S1;
  assign _02_ = ~S1;
  assign _03_ = ~S0;
endmodule

module sg13g2_nand2_1(A, B, Y);
  wire _0_;
  input A;
  wire A;
  input B;
  wire B;
  output Y;
  wire Y;
  assign _0_ = A & B;
  assign Y = ~_0_;
endmodule

module sg13g2_nand2_2(A, B, Y);
  wire _0_;
  input A;
  wire A;
  input B;
  wire B;
  output Y;
  wire Y;
  assign _0_ = A & B;
  assign Y = ~_0_;
endmodule

module sg13g2_nand2b_1(B, Y, A_N);
  wire _0_;
  wire _1_;
  input A_N;
  wire A_N;
  input B;
  wire B;
  output Y;
  wire Y;
  assign _1_ = _0_ & B;
  assign _0_ = ~A_N;
  assign Y = ~_1_;
endmodule

module sg13g2_nand2b_2(B, Y, A_N);
  wire _0_;
  wire _1_;
  input A_N;
  wire A_N;
  input B;
  wire B;
  output Y;
  wire Y;
  assign _1_ = _0_ & B;
  assign _0_ = ~A_N;
  assign Y = ~_1_;
endmodule

module sg13g2_nand3_1(A, B, C, Y);
  wire _0_;
  wire _1_;
  input A;
  wire A;
  input B;
  wire B;
  input C;
  wire C;
  output Y;
  wire Y;
  assign _0_ = A & B;
  assign _1_ = _0_ & C;
  assign Y = ~_1_;
endmodule

module sg13g2_nand3b_1(B, C, Y, A_N);
  wire _0_;
  wire _1_;
  wire _2_;
  input A_N;
  wire A_N;
  input B;
  wire B;
  input C;
  wire C;
  output Y;
  wire Y;
  assign _1_ = _0_ & B;
  assign _2_ = _1_ & C;
  assign _0_ = ~A_N;
  assign Y = ~_2_;
endmodule

module sg13g2_nand4_1(A, B, C, D, Y);
  wire _0_;
  wire _1_;
  wire _2_;
  input A;
  wire A;
  input B;
  wire B;
  input C;
  wire C;
  input D;
  wire D;
  output Y;
  wire Y;
  assign _0_ = A & B;
  assign _1_ = _0_ & C;
  assign _2_ = _1_ & D;
  assign Y = ~_2_;
endmodule

module sg13g2_nor2_1(A, B, Y);
  wire _0_;
  input A;
  wire A;
  input B;
  wire B;
  output Y;
  wire Y;
  assign _0_ = A | B;
  assign Y = ~_0_;
endmodule

module sg13g2_nor2_2(A, B, Y);
  wire _0_;
  input A;
  wire A;
  input B;
  wire B;
  output Y;
  wire Y;
  assign _0_ = A | B;
  assign Y = ~_0_;
endmodule

module sg13g2_nor2b_1(A, Y, B_N);
  wire _0_;
  wire _1_;
  input A;
  wire A;
  input B_N;
  wire B_N;
  output Y;
  wire Y;
  assign _1_ = A | _0_;
  assign _0_ = ~B_N;
  assign Y = ~_1_;
endmodule

module sg13g2_nor2b_2(A, Y, B_N);
  wire _0_;
  wire _1_;
  input A;
  wire A;
  input B_N;
  wire B_N;
  output Y;
  wire Y;
  assign _1_ = A | _0_;
  assign _0_ = ~B_N;
  assign Y = ~_1_;
endmodule

module sg13g2_nor3_1(A, B, C, Y);
  wire _0_;
  wire _1_;
  input A;
  wire A;
  input B;
  wire B;
  input C;
  wire C;
  output Y;
  wire Y;
  assign _0_ = A | B;
  assign _1_ = _0_ | C;
  assign Y = ~_1_;
endmodule

module sg13g2_nor3_2(A, B, C, Y);
  wire _0_;
  wire _1_;
  input A;
  wire A;
  input B;
  wire B;
  input C;
  wire C;
  output Y;
  wire Y;
  assign _0_ = A | B;
  assign _1_ = _0_ | C;
  assign Y = ~_1_;
endmodule

module sg13g2_nor4_1(A, B, C, D, Y);
  wire _0_;
  wire _1_;
  wire _2_;
  input A;
  wire A;
  input B;
  wire B;
  input C;
  wire C;
  input D;
  wire D;
  output Y;
  wire Y;
  assign _0_ = A | B;
  assign _1_ = _0_ | C;
  assign _2_ = _1_ | D;
  assign Y = ~_2_;
endmodule

module sg13g2_nor4_2(A, B, C, D, Y);
  wire _0_;
  wire _1_;
  wire _2_;
  input A;
  wire A;
  input B;
  wire B;
  input C;
  wire C;
  input D;
  wire D;
  output Y;
  wire Y;
  assign _0_ = A | B;
  assign _1_ = _0_ | C;
  assign _2_ = _1_ | D;
  assign Y = ~_2_;
endmodule

module sg13g2_o21ai_1(Y, A1, A2, B1);
  wire _0_;
  wire _1_;
  input A1;
  wire A1;
  input A2;
  wire A2;
  input B1;
  wire B1;
  output Y;
  wire Y;
  assign _0_ = _1_ & B1;
  assign _1_ = A1 | A2;
  assign Y = ~_0_;
endmodule

module sg13g2_or2_1(A, B, X);
  input A;
  wire A;
  input B;
  wire B;
  output X;
  wire X;
  assign X = A | B;
endmodule

module sg13g2_or2_2(A, B, X);
  input A;
  wire A;
  input B;
  wire B;
  output X;
  wire X;
  assign X = A | B;
endmodule

module sg13g2_or3_1(A, B, C, X);
  wire _0_;
  input A;
  wire A;
  input B;
  wire B;
  input C;
  wire C;
  output X;
  wire X;
  assign _0_ = A | B;
  assign X = _0_ | C;
endmodule

module sg13g2_or3_2(A, B, C, X);
  wire _0_;
  input A;
  wire A;
  input B;
  wire B;
  input C;
  wire C;
  output X;
  wire X;
  assign _0_ = A | B;
  assign X = _0_ | C;
endmodule

module sg13g2_or4_1(A, B, C, D, X);
  wire _0_;
  wire _1_;
  input A;
  wire A;
  input B;
  wire B;
  input C;
  wire C;
  input D;
  wire D;
  output X;
  wire X;
  assign _0_ = A | B;
  assign _1_ = _0_ | C;
  assign X = _1_ | D;
endmodule

module sg13g2_or4_2(A, B, C, D, X);
  wire _0_;
  wire _1_;
  input A;
  wire A;
  input B;
  wire B;
  input C;
  wire C;
  input D;
  wire D;
  output X;
  wire X;
  assign _0_ = A | B;
  assign _1_ = _0_ | C;
  assign X = _1_ | D;
endmodule

module sg13g2_sdfbbp_1(CLK, D, Q, Q_N, RESET_B, SCD, SCE, SET_B);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  input CLK;
  wire CLK;
  input D;
  wire D;
  reg IQ;
  wire IQN;
  output Q;
  wire Q;
  output Q_N;
  wire Q_N;
  input RESET_B;
  wire RESET_B;
  input SCD;
  wire SCD;
  input SCE;
  wire SCE;
  input SET_B;
  wire SET_B;
  assign _1_ = SCE & SCD;
  assign _2_ = _0_ & D;
  assign _3_ = _1_ | _2_;
  assign IQN = ~IQ;
  always @(posedge CLK, negedge SET_B, negedge RESET_B)
    if (!RESET_B) IQ <= 1'b0;
    else if (!SET_B) IQ <= 1'b1;
    else IQ <= _3_;
  assign _0_ = ~SCE;
  assign Q_N = IQN;
  assign Q = IQ;
endmodule

module sg13g2_sighold(SH);
  inout SH;
  wire SH;
endmodule

module sg13g2_slgcp_1(CLK, GATE, GCLK, SCE);
  input CLK;
  wire CLK;
  input GATE;
  wire GATE;
  output GCLK;
  wire GCLK;
  input SCE;
  wire SCE;
  wire int_GATE;
  assign GCLK = 1'h1;
  assign int_GATE = 1'h1;
endmodule

module sg13g2_tiehi(L_HI);
  output L_HI;
  wire L_HI;
  assign L_HI = 1'h1;
endmodule

module sg13g2_tielo(L_LO);
  output L_LO;
  wire L_LO;
  assign L_LO = 1'h0;
endmodule

module sg13g2_xnor2_1(A, B, Y);
  wire _0_;
  input A;
  wire A;
  input B;
  wire B;
  output Y;
  wire Y;
  assign Y = ~_0_;
  assign _0_ = A ^ B;
endmodule

module sg13g2_xor2_1(A, B, X);
  input A;
  wire A;
  input B;
  wire B;
  output X;
  wire X;
  assign X = A ^ B;
endmodule

module up_down_counter(clk, rst_n, up, count);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [3:0] _08_;
  wire [3:0] _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  input clk;
  wire clk;
  output [3:0] count;
  wire [3:0] count;
  input rst_n;
  wire rst_n;
  input up;
  wire up;
  sg13g2_nand2b_1 _13_ (
    .A_N(count[1]),
    .B(up),
    .Y(_00_)
  );
  sg13g2_nor2b_1 _14_ (
    .A(up),
    .B_N(count[1]),
    .Y(_01_)
  );
  sg13g2_xnor2_1 _15_ (
    .A(count[1]),
    .B(up),
    .Y(_02_)
  );
  sg13g2_xnor2_1 _16_ (
    .A(_08_[0]),
    .B(_02_),
    .Y(_09_[1])
  );
  sg13g2_a21oi_1 _17_ (
    .A1(count[0]),
    .A2(_00_),
    .B1(_01_),
    .Y(_03_)
  );
  sg13g2_xnor2_1 _18_ (
    .A(up),
    .B(count[2]),
    .Y(_04_)
  );
  sg13g2_xnor2_1 _19_ (
    .A(_03_),
    .B(_04_),
    .Y(_09_[2])
  );
  sg13g2_and4_1 _20_ (
    .A(count[1]),
    .B(up),
    .C(count[2]),
    .D(count[0]),
    .X(_05_)
  );
  sg13g2_nor4_1 _21_ (
    .A(count[1]),
    .B(up),
    .C(count[2]),
    .D(count[0]),
    .Y(_06_)
  );
  sg13g2_nor2_1 _22_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  sg13g2_xnor2_1 _23_ (
    .A(count[3]),
    .B(_07_),
    .Y(_09_[3])
  );
  sg13g2_dfrbp_1 _24_ (
    .CLK(clk),
    .D(_08_[0]),
    .Q(count[0]),
    .Q_N(_08_[0]),
    .RESET_B(rst_n)
  );
  sg13g2_dfrbp_1 _25_ (
    .CLK(clk),
    .D(_09_[1]),
    .Q(count[1]),
    .Q_N(_11_),
    .RESET_B(rst_n)
  );
  sg13g2_dfrbp_1 _26_ (
    .CLK(clk),
    .D(_09_[2]),
    .Q(count[2]),
    .Q_N(_12_),
    .RESET_B(rst_n)
  );
  sg13g2_dfrbp_1 _27_ (
    .CLK(clk),
    .D(_09_[3]),
    .Q(count[3]),
    .Q_N(_10_),
    .RESET_B(rst_n)
  );
  assign _09_[0] = _08_[0];
endmodule
